Jenkins Pipeline Syntax (Declarative vs. Scripted)
===================================================


Jenkins pipelines can be written in two different syntaxes: Declarative and Scripted. Each has its own use case, flexibility, and complexity level.


Declarative Pipeline
=====================

ðŸ”¹ Introduced in Jenkins 2.0 to simplify pipeline creation.
ðŸ”¹ Uses a structured syntax with predefined sections like pipeline, stages, and steps.
ðŸ”¹ Easier to read and maintain.
ðŸ”¹ Recommended for most use cases.

Example of a Declarative Pipeline
==================================

pipeline {
    agent any  // Runs on any available agent

    stages {
        stage('Build') {
            steps {
                echo 'Building...'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying...'
            }
        }
    }
}

Key Features of Declarative Pipeline
=====================================

ðŸ”¹ Uses pipeline {} as the main block.

ðŸ”¹ Uses stages {} and stage {} to define different stages.

ðŸ”¹ steps {} contains actual commands or scripts.

ðŸ”¹ Supports built-in post-processing with post {} for success, failure, etc.

===========================================================================================================================================================================

Scripted Pipeline
==================

ðŸ”¹ More powerful but complex, as it is fully Groovy-based.

ðŸ”¹ Allows complete flexibility to control pipeline execution.

ðŸ”¹ Useful for advanced use cases like looping, conditional execution, or shared libraries.


Example of a Scripted Pipeline
===============================

node {
    stage('Build') {
        echo 'Building...'
    }

    stage('Test') {
        echo 'Testing...'
    }

    stage('Deploy') {
        echo 'Deploying...'
    }
}


Key Features of Scripted Pipeline
==================================

ðŸ”¹ Uses node {} instead of pipeline {}.

ðŸ”¹ More flexible, allowing conditional logic, loops, and error handling.

ðŸ”¹ Can define variables and complex logic directly in Groovy.

===========================================================================================================================================================================

Which One to Use?
==================

ðŸ”¹ Use Declarative when you need a simple, structured, and maintainable pipeline.

ðŸ”¹ Use Scripted when you need complex logic, custom Groovy scripting, or advanced control.